{"version":3,"sources":["Karma.js","ScoresBySubreddit.js","SearchResults.js","SearchBar.js","App.js","serviceWorker.js","index.js"],"names":["Karma","handle","karma","KarmaContainer","console","log","Handle","comments","posts","styled","div","ScoresBySubreddit","scores","ScoreContainer","Table","Column","Object","keys","map","score","Cell","subreddit","subscriberTotal","table","td","th","SearchResults","ResultsContainer","override","css","Loader","loading","LoaderContainer","size","color","SearchBar","useState","setHandle","setKarma","scoresBySubreddit","setScoresBySubreddit","input","setInput","isFetching","setFetchingStatus","searchSuccess","setSearchStatus","setHandleData","e","a","target","value","toLowerCase","trim","fetchHandleData","preventDefault","success","axios","get","res","data","message","SearchContainer","onSubmit","onChange","placeholder","type","name","style","padding","required","SearchButton","button","App","Container","Title","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.be1a9333.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\nconst Karma = ({ handle, karma }) => {\n  return (\n    <KarmaContainer>\n      {console.log(\"incoming karma: \", karma)}\n      <Handle>\n        <i>{handle}</i> has a total of{\" \"}\n      </Handle>\n      <div>{karma.comments} comment karma </div>\n      <div>{karma.posts} posts karma</div>\n    </KarmaContainer>\n  );\n};\n\nexport default Karma;\n\nconst KarmaContainer = styled.div`\n  padding: 30px;\n`;\n\nconst Handle = styled.div`\n  font-weight: 600;\n`;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\nconst ScoresBySubreddit = ({ scores }) => {\n  return (\n    <ScoreContainer>\n      {console.log(\"incoming scores : \", scores)}\n\n      <Table>\n        <thead>\n          <tr>\n            <Column>Subreddit</Column>\n            <Column>Number of subscribers</Column>\n            <Column>Score</Column>\n          </tr>\n        </thead>\n        <tbody>\n          {Object.keys(scores).map((score) => {\n            return (\n              <tr>\n                <Cell>{scores[score].subreddit}</Cell>\n                <Cell>{scores[score].subscriberTotal}</Cell>\n                <Cell>{scores[score].score}</Cell>\n              </tr>\n            );\n          })}\n        </tbody>\n      </Table>\n    </ScoreContainer>\n  );\n};\n\nexport default ScoresBySubreddit;\n\nconst ScoreContainer = styled.div`\n  align-self: center;\n`;\n\nconst Table = styled.table`\n  border-collapse: collapse;\n`;\n\nconst Cell = styled.td`\n  border: 1px solid black;\n  padding: 5px 10px 5px 10px;\n  padding: 5px;\n`;\n\nconst Column = styled.th`\n  border: 1px solid black;\n  padding: 7px 10px 7px 10px;\n  font-weight: 600;\n  padding: 7px;\n`;\n","import React, { useState } from \"react\";\nimport Karma from \"./Karma\";\nimport ScoresBySubreddit from \"./ScoresBySubreddit\";\nimport styled from \"styled-components\";\n\nconst SearchResults = ({ handle, karma, scores }) => {\n  return (\n    <ResultsContainer>\n      <Karma handle={handle} karma={karma} />\n      <ScoresBySubreddit scores={scores} />\n    </ResultsContainer>\n  );\n};\n\nexport default SearchResults;\n\nconst ResultsContainer = styled.div`\n  display: flex;\n  -webkit-flex-direction: column;\n  -ms-flex-direction: column;\n  flex-direction: column;\n`;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport axios from \"axios\";\nimport SearchResults from \"./SearchResults\";\n\nimport PuffLoader from \"react-spinners/PuffLoader\";\nimport { css } from \"@emotion/core\";\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  border-color: black;\n`;\n\nconst SearchBar = () => {\n  const [handle, setHandle] = useState(\"\");\n  const [karma, setKarma] = useState({});\n  const [scoresBySubreddit, setScoresBySubreddit] = useState({});\n  const [input, setInput] = useState(\"\");\n  const [isFetching, setFetchingStatus] = useState(false);\n  const [searchSuccess, setSearchStatus] = useState(false);\n\n  const setHandleData = async (e) => {\n    const handle = e.target.value.toLowerCase().trim();\n    setHandle(handle);\n    setInput(handle);\n  };\n\n  const fetchHandleData = async (e) => {\n    e.preventDefault();\n    setFetchingStatus(true);\n    let success = true;\n    try {\n      let res = await axios.get(`/user/${handle}/karma`);\n      console.log(\"TOTAL LIKES RES: \", res.data);\n      setKarma(res.data.karma);\n    } catch (err) {\n      setSearchStatus(false);\n      console.log(\"Error occurred retrieving karma: \", err.message);\n    }\n    try {\n      let res = await axios.get(`/user/${handle}/scores-by-subreddit`);\n      console.log(\"BY SUBREDDIT RES:    \", res.data);\n      setScoresBySubreddit(res.data.scoresBySubreddit);\n    } catch (err) {\n      setSearchStatus(false);\n      console.log(\"Error occurred retrieving scores: \", err.message);\n    }\n    setFetchingStatus(false);\n    setInput(\"\");\n    setSearchStatus(success);\n  };\n\n  return (\n    <SearchContainer>\n      <form onSubmit={(e) => fetchHandleData(e)}>\n        <input\n          value={input}\n          onChange={(e) => setHandleData(e)}\n          placeholder=\"Reddit handle\"\n          type=\"text\"\n          name=\"handle\"\n          style={{ padding: \"4px\" }}\n          required\n        />\n        <SearchButton type=\"submit\">Search</SearchButton>\n      </form>\n      <Loader loading={isFetching} />\n      {searchSuccess ? (\n        <SearchResults\n          handle={handle}\n          karma={karma}\n          scores={scoresBySubreddit}\n        />\n      ) : null}\n    </SearchContainer>\n  );\n};\n\nconst Loader = ({ loading }) => {\n  if (loading) {\n    return (\n      <LoaderContainer>\n        <div>\n          <PuffLoader\n            css={override}\n            size={150}\n            color={\"black\"}\n            loading={true}\n          />\n        </div>\n      </LoaderContainer>\n    );\n  } else {\n    return null;\n  }\n};\n\nexport default SearchBar;\n\nconst SearchButton = styled.button`\n  margin-left: 8px;\n  padding: 4px;\n  width: 70px;\n  margin-top: 20px;\n`;\n\nconst SearchContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst LoaderContainer = styled.div`\n  position: fixed;\n  background-color: white;\n  opacity: 0.6;\n  z-index: 6;\n  height: 100vh;\n  width: 100vw;\n  left: 0;\n  top: 0;\n  margin-left: -50vw;\n  left: 50%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n","import React from \"react\";\nimport SearchBar from \"./SearchBar\";\nimport styled from \"styled-components\";\n\nfunction App() {\n  return (\n    <Container>\n      <Title>Search Reddit user's karma history</Title>\n      <SearchBar />\n    </Container>\n  );\n}\n\nexport default App;\n\nconst Container = styled.div`\n  text-align: center;\n  padding: 40px;\n  margin-top: 30px;\n  font-size: 15px;\n`;\n\nconst Title = styled.div`\n  font-size: 20px;\n  font-weight: 500;\n  padding: 20px;\n`;\n\nconst Description = styled.div``;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}